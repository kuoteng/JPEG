#ifndef _JPEG_HEADER
#define _JPEG_HEADER
#include <stdint.h>
#include <inttypes.h>

typedef uint8_t byte;

// typedef struct {
//     //big endian
//     byte higher_byte;
//     byte lowwer_byte;
// }word_unit;

typedef uint16_t word;


//bmp header
typedef struct {
        unsigned short	bfType;
        unsigned int	bfSize;
        unsigned short	bfReserved1;
        unsigned short	bfReserved2;
        unsigned int	bfOffBits;
} BITMAPFILEHEADER;

typedef struct {
        unsigned int	biSize;
        int				biWidth;
        int				biHeight;
        unsigned short	biPlanes;
        unsigned short	biBitCount;
        unsigned int	biCompression;
        unsigned int	biSizeImage;
        int				biXPelsPerMeter;
        int				biYPelsPerMeter;
        unsigned int	biClrUsed;
        unsigned int	biClrImportant;
} BITMAPINFOHEADER;

const int zigzag_index[8][8] = {
    0, 1, 5, 6,14,15,27,28,
    2, 4, 7,13,16,26,29,42,
    3, 8,12,17,25,30,41,43,
    9,11,18,24,31,40,44,53,
    10,19,23,32,39,45,52,54,
    20,22,33,38,46,51,55,60,
    21,34,37,47,50,56,59,61,
    35,36,48,49,57,58,62,63
};

const byte quantize_table[2][64] = {{
        //Luminance quantization table
        //ATTENTION: this is not zigzag arrange yet
        16, 11, 10, 16, 24,  40, 51, 61,
        12, 12, 14, 19, 26,  58, 60, 55,
        14, 13, 16, 24, 40,  57, 69, 56,
        14, 17, 22, 29, 51,  87, 80, 62,
        18, 22, 37, 56, 68,  109, 103, 77,
        24, 35, 55, 64, 81,  104, 113, 92,
        49, 64, 78, 87, 103, 121, 120, 101,
        72, 92, 95, 98, 112, 100, 103, 99
    }, {
        //Chrominance quantization table
        17, 18, 24, 47, 99, 99, 99, 99,
        18, 21, 26, 66, 99, 99, 99, 99,
        24, 26, 56, 99, 99, 99, 99, 99,
        47, 66, 99, 99, 99, 99, 99, 99,
        99, 99, 99, 99, 99, 99, 99, 99,
        99, 99, 99, 99, 99, 99, 99, 99,
        99, 99, 99, 99, 99, 99, 99, 99,
        99, 99, 99, 99, 99, 99, 99, 99
    }
};
const byte dc_cof_code_length[2][16] = {
    // 0, 0, 7, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0x00,0x01,0x05,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    // 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
    0x00,0x03,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00
};

const byte dc_cof_value[2][12] = {
    // 4, 5, 3, 2, 6, 1, 0, 7, 8, 9, 10, 11,
    0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,
    // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
    0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,
};

const byte ac_cof_code_length[2][16] = {
    0x00,0x02,0x01,0x03,0x03,0x02,0x04,0x03,0x05,0x05,0x04,0x04,0x00,0x00,0x01,0x7d,
    0x00,0x02,0x01,0x02,0x04,0x04,0x03,0x04,0x07,0x05,0x04,0x04,0x00,0x01,0x02,0x77
};

const byte ac_cof_value[2][162] = {
    0x01,0x02,0x03,0x00,0x04,0x11,0x05,0x12,0x21,0x31,0x41,0x06,0x13,0x51,0x61,0x07,
    0x22,0x71,0x14,0x32,0x81,0x91,0xA1,0x08,0x23,0x42,0xB1,0xC1,0x15,0x52,0xD1,0xF0,
    0x24,0x33,0x62,0x72,0x82,0x09,0x0A,0x16,0x17,0x18,0x19,0x1A,0x25,0x26,0x27,0x28,
    0x29,0x2A,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x43,0x44,0x45,0x46,0x47,0x48,0x49,
    0x4A,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x63,0x64,0x65,0x66,0x67,0x68,0x69,
    0x6A,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0x83,0x84,0x85,0x86,0x87,0x88,0x89,
    0x8A,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,
    0xA8,0xA9,0xAA,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xC2,0xC3,0xC4,0xC5,
    0xC6,0xC7,0xC8,0xC9,0xCA,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xE1,0xE2,
    0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,
    0xF9,0xFA,
    0x00,0x01,0x02,0x03,0x11,0x04,0x05,0x21,0x31,0x06,0x12,0x41,0x51,0x07,0x61,0x71,
    0x13,0x22,0x32,0x81,0x08,0x14,0x42,0x91,0xA1,0xB1,0xC1,0x09,0x23,0x33,0x52,0xF0,
    0x15,0x62,0x72,0xD1,0x0A,0x16,0x24,0x34,0xE1,0x25,0xF1,0x17,0x18,0x19,0x1A,0x26,
    0x27,0x28,0x29,0x2A,0x35,0x36,0x37,0x38,0x39,0x3A,0x43,0x44,0x45,0x46,0x47,0x48,
    0x49,0x4A,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x63,0x64,0x65,0x66,0x67,0x68,
    0x69,0x6A,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0x82,0x83,0x84,0x85,0x86,0x87,
    0x88,0x89,0x8A,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0xA2,0xA3,0xA4,0xA5,
    0xA6,0xA7,0xA8,0xA9,0xAA,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xC2,0xC3,
    0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,
    0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,
    0xF9,0xFA
};

//K.3å 這樣就省去建構huffman tree的時間 =>老師很看重效能
// we should distinguish 100 and 10
const char* dc_diff[2][12] = {{
    //luminance DC coefficient differences
        "00",
        "010",
        "011",
        "100",
        "101",
        "110",
        "1110",
        "11110",
        "111110",
        "1111110",
        "11111110",
        "111111110",
    }, {
    //chrominance DC coefficient differences
        "00",
        "01",
        "10",
        "110",
        "1110",
        "11110",
        "111110",
        "1111110",
        "11111110",
        "111111110",
        "1111111110",
        "11111111110"
    }
};
//K.5 這樣就省去建構huffman tree的時間 =>老師很看重效能
//注意，0/0=EOB F/0=ZRL存於表中，與其他部分index不一致
const char* ac_cof[2][16][15] = {{
        //luminance AC coefficients
        "1010",//0/0 (EOB) ATTENTION
        "00",
        "01",
        "100",
        "1011",
        "11010",
        "1111000",
        "11111000",
        "1111110110",
        "1111111110000010",
        "1111111110000011",//0/A
        "0",
        "0",
        "0",
        "0",

        "1100",
        "11011",
        "1111001",
        "111110110",
        "11111110110",
        "1111111110000100",
        "1111111110000101",
        "1111111110000110",
        "1111111110000111",
        "1111111110001000",//1/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "11100",
        "11111001",
        "1111110111",
        "111111110100",
        "1111111110001001",
        "1111111110001010",
        "1111111110001011",
        "1111111110001100",
        "1111111110001101",
        "1111111110001110",//2/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "111010",
        "111110111",
        "111111110101",
        "1111111110001111",
        "1111111110010000",
        "1111111110010001",
        "1111111110010010",
        "1111111110010011",
        "1111111110010100",
        "1111111110010101",//3/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "111011",
        "1111111000",
        "1111111110010110",
        "1111111110010111",
        "1111111110011000",
        "1111111110011001",
        "1111111110011010",
        "1111111110011011",
        "1111111110011100",
        "1111111110011101",//4/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "1111010",
        "11111110111",
        "1111111110011110",
        "1111111110011111",
        "1111111110100000",
        "1111111110100001",
        "1111111110100010",
        "1111111110100011",
        "1111111110100100",
        "1111111110100101",//5/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "1111011",
        "111111110110",
        "1111111110100110",
        "1111111110100111",
        "1111111110101000",
        "1111111110101001",
        "1111111110101010",
        "1111111110101011",
        "1111111110101100",
        "1111111110101101",//6/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "11111010",
        "111111110111",
        "1111111110101110",
        "1111111110101111",
        "1111111110110000",
        "1111111110110001",
        "1111111110110010",
        "1111111110110011",
        "1111111110110100",
        "1111111110110101",//7/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "111111000",
        "111111111000000",
        "1111111110110110",
        "1111111110110111",
        "1111111110111000",
        "1111111110111001",
        "1111111110111010",
        "1111111110111011",
        "1111111110111100",
        "1111111110111101",//8/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "111111001",
        "1111111110111110",
        "1111111110111111",
        "1111111111000000",
        "1111111111000001",
        "1111111111000010",
        "1111111111000011",
        "1111111111000100",
        "1111111111000101",
        "1111111111000110",//9/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "111111010",
        "1111111111000111",
        "1111111111001000",
        "1111111111001001",
        "1111111111001010",
        "1111111111001011",
        "1111111111001100",
        "1111111111001101",
        "1111111111001110",
        "1111111111001111",//A/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "1111111001",
        "1111111111010000",
        "1111111111010001",
        "1111111111010010",
        "1111111111010011",
        "1111111111010100",
        "1111111111010101",
        "1111111111010110",
        "1111111111010111",
        "1111111111011000",//B/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "1111111010",
        "1111111111011001",
        "1111111111011010",
        "1111111111011011",
        "1111111111011100",
        "1111111111011101",
        "1111111111011110",
        "1111111111011111",
        "1111111111100000",
        "1111111111100001",//C/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "11111111000",
        "1111111111100010",
        "1111111111100011",
        "1111111111100100",
        "1111111111100101",
        "1111111111100110",
        "1111111111100111",
        "1111111111101000",
        "1111111111101001",
        "1111111111101010",//D/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "1111111111101011",
        "1111111111101100",
        "1111111111101101",
        "1111111111101110",
        "1111111111101111",
        "1111111111110000",
        "1111111111110001",
        "1111111111110010",
        "1111111111110011",
        "1111111111110100",//E/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "11111111001",//F/0(ZRL) ATTENTION!!!!!
        "1111111111110101",
        "1111111111110110",
        "1111111111110111",
        "1111111111111000",
        "1111111111111001",
        "1111111111111010",
        "1111111111111011",
        "1111111111111100",
        "1111111111111101",
        "1111111111111110",//F/A
        "0",
        "0",
        "0",
        "0"
    }, {
        //chrominance AC coefficients
        "00",//0/0 EOB
        "01",
        "100",
        "1010",
        "11000",
        "11001",
        "111000",
        "1111000",
        "111110100",
        "1111110110",
        "111111110100",//0/A
        "0",
        "0",
        "0",
        "0",

        "1011",
        "111001",
        "11110110",
        "111110101",
        "11111110110",
        "111111110101",
        "1111111110001000",
        "1111111110001001",
        "1111111110001010",
        "1111111110001011",//1/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "11010",
        "11110111",
        "1111110111",
        "111111110110",
        "111111111000010",
        "1111111110001100",
        "1111111110001101",
        "1111111110001110",
        "1111111110001111",
        "1111111110010000",//2/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "11011",
        "11111000",
        "1111111000",
        "111111110111",
        "1111111110010001",
        "1111111110010010",
        "1111111110010011",
        "1111111110010100",
        "1111111110010101",
        "1111111110010110",//3/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "111010",
        "111110110",
        "1111111110010111",
        "1111111110011000",
        "1111111110011001",
        "1111111110011010",
        "1111111110011011",
        "1111111110011100",
        "1111111110011101",
        "1111111110011110",//4/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "111011",
        "1111111001",
        "1111111110011111",
        "1111111110100000",
        "1111111110100001",
        "1111111110100010",
        "1111111110100011",
        "1111111110100100",
        "1111111110100101",
        "1111111110100110",//5/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "1111001",
        "11111110111",
        "1111111110100111",
        "1111111110101000",
        "1111111110101001",
        "1111111110101010",
        "1111111110101011",
        "1111111110101100",
        "1111111110101101",
        "1111111110101110",//6/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "1111010",
        "11111111000",
        "1111111110101111",
        "1111111110110000",
        "1111111110110001",
        "1111111110110010",
        "1111111110110011",
        "1111111110110100",
        "1111111110110101",
        "1111111110110110",//7/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "11111001",
        "1111111110110111",
        "1111111110111000",
        "1111111110111001",
        "1111111110111010",
        "1111111110111011",
        "1111111110111100",
        "1111111110111101",
        "1111111110111110",
        "1111111110111111",//8/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "111110111",
        "1111111111000000",
        "1111111111000001",
        "1111111111000010",
        "1111111111000011",
        "1111111111000100",
        "1111111111000101",
        "1111111111000110",
        "1111111111000111",
        "1111111111001000",//9/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "111111000",
        "1111111111001001",
        "1111111111001010",
        "1111111111001011",
        "1111111111001100",
        "1111111111001101",
        "1111111111001110",
        "1111111111001111",
        "1111111111010000",
        "1111111111010001",//A/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "111111001",
        "1111111111010010",
        "1111111111010011",
        "1111111111010100",
        "1111111111010101",
        "1111111111010110",
        "1111111111010111",
        "1111111111011000",
        "1111111111011001",
        "1111111111011010",//B/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "111111010",
        "1111111111011011",
        "1111111111011100",
        "1111111111011101",
        "1111111111011110",
        "1111111111011111",
        "1111111111100000",
        "1111111111100001",
        "1111111111100010",
        "1111111111100011",//C/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "11111111001",
        "1111111111100100",
        "1111111111100101",
        "1111111111100110",
        "1111111111100111",
        "1111111111101000",
        "1111111111101001",
        "1111111111101010",
        "1111111111101011",
        "1111111111101100",//D/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "11111111100000",
        "1111111111101101",
        "1111111111101110",
        "1111111111101111",
        "1111111111110000",
        "1111111111110001",
        "1111111111110010",
        "1111111111110011",
        "1111111111110100",
        "1111111111110101",//E/A
        "0",
        "0",
        "0",
        "0",
        "0",

        "1111111010",//F/0 (ZRL) ATTENTION!
        "111111111000011",
        "1111111111110110",
        "1111111111110111",
        "1111111111111000",
        "1111111111111001",
        "1111111111111010",
        "1111111111111011",
        "1111111111111100",
        "1111111111111101",
        "1111111111111110",
        "0",
        "0",
        "0",
        "0"
}};


typedef struct {
    byte r;
    byte g;
    byte b;
}rgb_element;
// 我們完全可以每個點保存一個 8bit 的亮度值, 每 2x2 個點保存一個 Cr Cb 值, 而圖像在肉眼中的感覺不會起太大的變化.
// 原來用 RGB 模型, 4 個點需要 4x3=12 字節. 而現在僅需要 4+2=6 字節
typedef struct {
    byte y[4];
    byte cb;
    byte cr;
}yuv12_element;

typedef struct {
    byte y;
    byte cb;
    byte cr;
}yuv_element;

#define BYTE_TO_BINARY_PATTERN "%c%c%c%c%c%c%c%c"
#define BYTE_TO_BINARY(byte)  \
  (byte & 0x0080 ? '1' : '0'), \
  (byte & 0x0040 ? '1' : '0'), \
  (byte & 0x0020 ? '1' : '0'), \
  (byte & 0x0010 ? '1' : '0'), \
  (byte & 0x0008 ? '1' : '0'), \
  (byte & 0x0004 ? '1' : '0'), \
  (byte & 0x0002 ? '1' : '0'), \
  (byte & 0x0001 ? '1' : '0')

typedef double mcu_small_block[8][8];

uint16_t read_word_to_bigendian(FILE* fp)
{
    byte high,low;
    fread(&high, 1, 1, fp);
    fread(&low, 1, 1, fp);
    // printf("get a bigendian word: %.2x%.2x\n", high, low);
    // 0000 0000 0100 0011
    //
    // byte high = c.higher_byte;
    //exchange the byte: Motorola format
    word word_value = 0x0000;
    word_value = ((word_value | high) << 8) &0xff00;
    word_value = word_value | low;
    // 0000 0000 0000 0000
    // byte low = c.lowwer_byte;
    // word low = (c & 0x00ff << 8);
    // 0000 0000 0100 0011
    return word_value;
}

void write_word_to_littleendian(FILE* fp, word word_value) {
    word_value = ((word_value>>8)&0xff) | ((word_value&0xff)<<8);
    fwrite(&word_value, 1, 2, fp);
}

#define START 0xFF
#define SOI 0xD8
#define APP0 0xE0
#define APP1 0xE1
#define APP2 0xE2
#define APP3 0xE3
#define APP4 0xE4
#define APP5 0xE5
#define APP6 0xE6
#define APP7 0xE7
#define APP8 0xE8
#define APP9 0xE9
#define APP10 0xEA
#define APP11 0xEB
#define APP12 0xEC
#define APP13 0xED
#define APP14 0xEE
#define APP15 0xEF
#define SOF0 0xC0
#define DQT 0xDB
#define DHT 0xC4
#define SOS 0xDA
#define EOI 0xD9

#endif
